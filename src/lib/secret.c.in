/*
 * Copyright (c) 2024, Alibaba Cloud
 * Copyright (c) 2016-2023, Wind River Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2) Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3) Neither the name of Wind River Systems nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Author:
 *        Jia Zhang <zhang.jia@linux.alibaba.com>
 */

#include <cryptfs_tpm2.h>

/*
 * Note: this value must be same with scripts/ecrypt_secret.py
 */
#define XOR_CODE		@@CRYPTFS_TPM2_SECRET_XOR_BYTE_CODE@@

extern const uint8_t secret_area[];
extern const unsigned int secret_area_size[];

static void
decrypt_secret(char *out, const uint8_t *in, unsigned int in_size)
{
	uint8_t xor = XOR_CODE;

	for (unsigned int i = 0; i < in_size; ++i) {
		out[i] = in[i] ^ xor;
		xor = in[i];
	}
}

void
get_primary_key_secret(char *out, unsigned int *out_size)
{
	if (!out || !out_size)
		return;

	unsigned int secret_size = *out_size;

	if (cryptfs_tpm2_option_get_primary_key_secret((uint8_t *)out,
						       &secret_size) ==
	    EXIT_SUCCESS && secret_size) {
#ifdef DEBUG
		cryptfs_tpm2_util_hex_dump("primary key secret",
					   (uint8_t *)out, secret_size);
#endif
		*out_size = secret_size;

		return;
	}

	if (secret_area_size[0] < *out_size)
		*out_size = secret_area_size[0];

	const uint8_t *in = secret_area;

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted primary key secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted primary key secret",
				   (uint8_t *)out, *out_size);
#endif
}

void
get_passphrase_secret(char *out, unsigned int *out_size)
{
	if (!out || !out_size)
		return;

	unsigned int secret_size = *out_size;

	if (cryptfs_tpm2_option_get_passphrase_secret((uint8_t *)out,
						      &secret_size) ==
	    EXIT_SUCCESS && secret_size) {
#ifdef DEBUG
		cryptfs_tpm2_util_hex_dump("passphrase secret",
					   (uint8_t *)out, secret_size);
#endif
		*out_size = secret_size;

		return;
	}

	if (secret_area_size[1] < *out_size)
		*out_size = secret_area_size[1];

	const uint8_t *in = secret_area + secret_area_size[0];

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("encrypted passphrase secret",
				   in, *out_size);
#endif

	decrypt_secret(out, in, *out_size);

#ifdef DEBUG
	cryptfs_tpm2_util_hex_dump("decrypted passphrase secret",
				   (uint8_t *)out, *out_size);
#endif
}
