#!/bin/bash

# Initramfs script called by /init
#
# This script is a helper used to decrypt and mount the rootfs
# encrypted with cryptfs-tpm2.
#
# BSD 2-clause "Simplified" License
#
# Copyright (c) 2016-2024, Alibaba Cloud
# Copyright (c) 2016-2023, Wind River Systems, Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3) Neither the name of Wind River Systems nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author:
#        Jia Zhang <zhang.jia@linux.alibaba.com>
#

#
# Global constant settings
#

# The tmpfs filesystem used to temporarily place the
# passphrase file.
TMP_DIR="/tmp"

# The file name of the plain passphrase.
PASSPHRASE="passphrase"

# The maxinum number of passphrase retry
MAX_PASSPHRASE_RETRY_COUNT=3

# The timeout (tenth of a second) for the rootfs device got ready
MAX_TIMEOUT_FOR_WAITING_RAWDEV=60

# The timeout (millisecond) upon awaiting the resource manager
MAX_TIMEOUT_FOR_WAITING_RESOURCEMGR=3000

#
# Global variable settings
#

ROOTFS_DIR="${1:-/rootfs}"
ROOTFS_DEV="$2"
ROOTFS_MODE="${3:-rw}"
# The mapping name of device-mapper crypt target for
# the LUKS partition.
LUKS_NAME="${4:-cryptfs_tpm2}"

TPM_TIS_MODULE_LOADED=0
TPM_CRB_MODULE_LOADED=0
TPM_DEVICE=""
TMP_DIR_MOUNTED=0

print_critical() {
    printf "\033[1;35m"
    echo "$@"
    printf "\033[0m"
}

print_error() {
    printf "\033[1;31m"
    echo "$@"
    printf "\033[0m"
}

print_warning() {
    printf "\033[1;33m"
    echo "$@"
    printf "\033[0m"
}

print_info() {
    printf "\033[1;32m"
    echo "$@"
    printf "\033[0m"
}

print_verbose() {
    printf "\033[1;36m"
    echo "$@"
    printf "\033[0m"
}

create_dir() {
    local dir="$1"

    if [ ! -d "$dir" ]; then
        mkdir -p "$dir" || return 1
    fi

    return 0
}

get_dev_uuid() {
    blkid -t UUID=$1 -l | awk -F: '{ print $1 }'
}

get_dev_partuuid() {
    blkid 2> /dev/null | grep "PARTUUID=\"$1\"" | grep -o "^[^: ]*"
}

get_dev_label() {
    rawdev=`blkid -t LABEL=$1 -l | awk -F: '{print $1}'`
    # Also try the partition label for the same name if not found
    if [ "$rawdev" == "" ] ; then
        rawdev=`blkid -t PARTLABEL=$1 -l | awk -F: '{ print $1 }'`
    fi
    echo $rawdev
}

get_dev_rawdev() {
    [ -e /sys/class/block/`basename "$1"` ] && echo $1
}

parse_rootfs_dev_path() {
    local ret_type="$1"
    local ret_name="$2"
    local dev_type dev_name

    # Determine the type of root device
    for i in "UUID" "PARTUUID" "LABEL" "" ; do
        local word=${i:+"$i="}
        local root=$(grep -o "\<root=${word}[^= ]*" /proc/cmdline)

        dev_name=$(echo "$root" | awk -F'=' '{ print $NF }' | sed 's/"//g')
        dev_type=${i:-"RAWDEV"}
        [ -n "$dev_name" ] && break
    done

    if [ -z "$dev_name" -o -z "$dev_type" ]; then
        print_error "Empty root= option, cannot proceed to boot!"
        return 1
    fi

    [ -n "$ret_type" ] && eval $ret_type="$dev_type"
    [ -n "$ret_name" ] && eval $ret_name="$dev_name"

    print_verbose "device path: $dev_type=$dev_name"

    return 0
}

__get_rawdev() {
    local type="$1"
    local name="$2"
    local ret_rawdev="$3"
    local rawdev

    case "$type" in
        UUID)     rawdev=$(get_dev_uuid $name) ;;
        PARTUUID) rawdev=$(get_dev_partuuid $name) ;;
        LABEL)    rawdev=$(get_dev_label $name) ;;
        RAWDEV)   rawdev=$(get_dev_rawdev $name) ;;
    esac

    if [ -n "$rawdev" ] ; then
        [ -n "$ret_rawdev" ] && eval $ret_rawdev="$rawdev"
        print_info "Found root device: $rawdev"
        return 0
    fi

    return 1
}

get_rawdev() {
    local retry=0

    while [ $retry -lt $MAX_TIMEOUT_FOR_WAITING_RAWDEV ]; do
        __get_rawdev "$1" "$2" "$3"
        [ $? -eq 0 ] && return 0

        sleep 0.1
        retry=$(($retry+1))
    done

    print_error "Unable to find raw device for $1=$2!"

    return 1
}

detect_tpm_chip() {
    local ret_absent="$1"

    [ ! -e /sys/class/tpm ] && print_info "TPM subsystem is not enabled." && return 1

    depmod -a 2>/dev/null
    ! grep -q "^tpm_tis" /proc/modules && modprobe --quiet tpm_tis && TPM_TIS_MODULE_LOADED=1
    ! grep -q "^tpm_crb" /proc/modules && modprobe --quiet tpm_crb && TPM_CRB_MODULE_LOADED=1

    local tpm_devices=$(ls /sys/class/tpm)
    [ -z "$tpm_devices" ] && print_info "No TPM chip detected." && return 1

    local tpm_absent=1
    local name=""
    for name in $tpm_devices; do
        grep -q "TCG version: 1.2" "/sys/class/tpm/$name/device/caps" 2>/dev/null &&
            print_info "TPM 1.2 device $name is not supported." && break

        grep -q "TPM 2.0 Device" "/sys/class/tpm/$name/device/description" 2>/dev/null &&
            tpm_absent=0 && break
    done

    [ $tpm_absent -eq 1 ] && print_info "No supported TPM device found." && return 1

    local name_in_dev="$name"
    # /dev/tpm is the alias of /dev/tpm0.
    [ "$name_in_dev" = "tpm0" ] && name_in_dev+=" tpm"

    local _name=""
    for _name in $name_in_dev; do
        [ -c "/dev/$_name" ] && break

        local major=$(cat "/sys/class/tpm/$name/dev" | cut -d ":" -f 1)
        local minor=$(cat "/sys/class/tpm/$name/dev" | cut -d ":" -f 2)
        ! mknod "/dev/$_name" c $major $minor &&
            print_error "Unable to create tpm device node $_name." && return 1

        TPM_DEVICE="/dev/$_name"

        break
    done

    [ -n "$ret_absent" ] && eval $ret_absent=$tpm_absent

    print_info "TPM device /dev/$_name detected."

    return 0
}

open_luks_part_with_encrypted_passphrase() {
    local luks_rawdev="$1"

    while [ 1 ]; do
        # Unseal the passphrase
        cryptfs-tpm2 -q unseal passphrase -P auto -o "$TMP_DIR/$PASSPHRASE" 2>/dev/null
        local res=$?

        [ $res -eq 0 ] && break

        print_error "Unable to unseal the passphrase with the error $res" && return 1
    done

    ! cryptsetup luksOpen --key-file "$TMP_DIR/$PASSPHRASE" "$luks_rawdev" "$LUKS_NAME" &&
        print_error "Unable to open the LUKS partition $luks_rawdev with the encrypted passphrase" && return 1

    print_verbose "The LUKS partition $luks_rawdev is opened with the encrypted passphrase"

    # Remove the plain passphrase file
    ! rm -f "$TMP_DIR/$PASSPHRASE" && print_error "Unable to remove the decrypted passphrase file" && return 1

    return 0
}

open_luks_part_with_typed_passphrase() {
    local luks_rawdev="$1"
    local i=1
    for i in `seq $MAX_PASSPHRASE_RETRY_COUNT`; do
        cryptsetup luksOpen --key-file - "$luks_rawdev" "$LUKS_NAME" &&
            print_verbose "The LUKS partition $luks_rawdev is opened with the typed passphrase" &&
            return 0

        [ $(($MAX_PASSPHRASE_RETRY_COUNT - $i)) -ne 0 ] &&
            print_warning "Passphrase incorrect. $(($MAX_PASSPHRASE_RETRY_COUNT - $i))-time remaining ..."
    done

    print_error "Failed to open the LUKS partition $luks_rawdev with the typed passphrase"

    return 1
}

# Alway attempt to map LUKS rootfs with an appropriate passphrase in
# this order:
# - Persistent passphrase if present in TPM
# - Password prompt
map_luks() {
    local luks_rawdev="$1"
    local tpm_absent=$2

    print_verbose "Attempting to mount the LUKS partition $luks_rawdev ..."

    local err=1
    if [ $tpm_absent -eq 0 ]; then
        # Delay 100ms before connecting the resource manager per attempt, and
        # totally await the resource manager 3s at most.
        tcti-probe -q wait -d 100 -t $MAX_TIMEOUT_FOR_WAITING_RESOURCEMGR 2>/dev/null
        err=$?

        if [ $err -eq 0 ]; then
            open_luks_part_with_encrypted_passphrase "$luks_rawdev"
            err=$?
        fi

        rm -f "$TMP_DIR/$PASSPHRASE"
    fi

    if [ $err -ne 0 ]; then
        print_verbose "Attempting to prompt with inputing passphrase ..."

        open_luks_part_with_typed_passphrase "$luks_rawdev"
        err=$?
    fi

    return $err
}

mount_luks() {
    local err=0

    mount -o "$ROOTFS_MODE" "/dev/mapper/$LUKS_NAME" "$ROOTFS_DIR" ||
        (err=1 && [ -e "/dev/mapper/$LUKS_NAME" ] && cryptsetup luksClose "$LUKS_NAME")

    return $err
}

trap_handler() {
    local err=$?

    print_verbose "Cleaning up with exit code $err ..."

    if [ $err -ne 0 ]; then
        if [ -d "$ROOTFS_DIR" ]; then
            umount "$ROOTFS_DIR" 2>/dev/null
        fi

        cryptsetup luksClose "$LUKS_NAME" 2>/dev/null
    fi

    rm -f "$TMP_DIR/$PASSPHRASE" 2>/dev/null

    [ $TPM_TIS_MODULE_LOADED -eq 1 ] && modprobe --quiet -r tpm_tis
    [ $TPM_CRB_MODULE_LOADED -eq 1 ] && modprobe --quiet -r tpm_crb    
    [ ! -z "$TPM_DEVICE" ] && rm -f "$TPM_DEVICE" 2>/dev/null

    if [ $TMP_DIR_MOUNTED -eq 1 ]; then
        umount "$TMP_DIR" 2>/dev/null
        rmdir --ignore-fail-on-non-empty "$TMP_DIR" 2>/dev/null
    fi

    unset TSS2_TCTI
}


trap "trap_handler $?" SIGINT EXIT

# Detect the present of LUKS partition.

luks_rawdev_pathes="$(blkid -s TYPE | grep crypto_LUKS | awk -F: '{ print $1 }')"
[ -z "$luks_rawdev_pathes" ] && print_info "No LUKS partition detected" && exit 1

! parse_rootfs_dev_path rootfs_dev_path_type rootfs_dev_path_name && exit 1

rootfs_is_luks=0
get_rawdev $rootfs_dev_path_type $rootfs_dev_path_name rootfs_rawdev
if [ $? -eq 0 ]; then
    # Check whether the rootfs device is a LUKS partition.
    for luks_rawdev in $luks_rawdev_pathes; do
        [ "$rootfs_rawdev" = "$luks_rawdev" ] && rootfs_is_luks=1 && break
    done

    if [ $rootfs_is_luks -eq 0 ]; then
        print_info "The specified rootfs is not a LUKS partition"
        exit 1
    fi
fi

# root=LABEL=xxx cannot be parsed until the LUKS partition is mounted.
[ $rootfs_is_luks -eq 0 -a "$rootfs_dev_path_type" != "LABEL" ] &&
    print_error "Unable to locate the specified rootfs" && exit 1

# Overwrite LUKS_NAME if root=LABEL=xxx is specified.
[ $rootfs_is_luks -eq 0 -a "$rootfs_dev_path_type" = "LABEL" -a -n "$rootfs_dev_path_name" ] &&
    LUKS_NAME="$rootfs_dev_path_name"

# Make sure the plain passphrase will be saved in a RAM-based
# filesystem to avoid the risk of exposing it.

if ! create_dir "$TMP_DIR"; then
    print_error "Unable to create $TMP_DIR for mounting tmpfs filesystem"
    exit 1
fi

if ! grep -q "$TMP_DIR" /proc/mounts; then
   ! mount -t tmpfs none "$TMP_DIR" 2>/dev/null &&
       print_error "Unable to mount tmpfs filesystem" && exit 1
   TMP_DIR_MOUNTED=1
else
   tmp_dir_fs_types="$(grep "$TMP_DIR" /proc/mounts | awk '{print $3}')"

   for fs_type in $tmp_dir_fs_types; do
       [ "$fs_type" != "tmpfs" ] &&
           print_error "/tmp is mounted with $fs_type != tmpfs" && exit 1
   done
fi

# Probe TPM.

tpm_absent=1
if detect_tpm_chip tpm_absent; then
    ! ifconfig lo up && print_error "Unable to active the loop interface" && exit 1
    tpm_absent=0
    export TSS2_TCTI=device
else
    tpm_absent=1
fi

! create_dir "$ROOTFS_DIR" && print_error "Unable to create $ROOTFS_DIR" && exit 1

# Check whether the LUKS partition is specified in root=.
err=1
for luks_rawdev in $luks_rawdev_pathes; do
    [ -n "$rootfs_rawdev" -a "$rootfs_rawdev" != "$luks_rawdev" ] && continue
 
    ! map_luks $luks_rawdev $tpm_absent && break
    ! mount_luks && break

    [ -z "$rootfs_rawdev" ] && ! get_rawdev $rootfs_dev_path_type \
        $rootfs_dev_path_name rootfs_rawdev && {
            umount "$ROOTFS_DIR" 2>/dev/null
            cryptsetup luksClose "$LUKS_NAME" 2>/dev/null
            continue
        }

    err=0
    break
done

[ $err -eq 1 ] &&
    print_info "Unable to mount the rootfs device" && exit 1

print_info "The LUKS partition $luks_rawdev is mounted as rootfs successfully"

exit 0
